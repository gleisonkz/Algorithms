[
    {
        "label": "Pen",
        "importPath": "questao3",
        "description": "questao3",
        "isExtraImport": true,
        "detail": "questao3",
        "documentation": {
            "value": "\n```python\nimport questao3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Utils",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nimport utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "exam-AV1.questao1",
        "description": "exam-AV1.questao1",
        "peekOfCode": "def tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\ndef factorial(number: int) -> int:\n    if number == 0:\n        return 1\n    else:",
        "detail": "exam-AV1.questao1",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao1 import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\ndef factorial(number: int) -> int:\n    if number == 0:\n        return 1\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "exam-AV1.questao1",
        "description": "exam-AV1.questao1",
        "peekOfCode": "def factorial(number: int) -> int:\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number-1)\nnumber: int = tryParseInt(\"Type a number : \")\nprint(f\"The number {number} factorial is: {factorial(number)}\")",
        "detail": "exam-AV1.questao1",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao1 import factorial\n```\n\n```python\n\n\n```\n\n```python\ndef factorial(number: int) -> int:\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number-1)\nnumber: int = tryParseInt(\"Type a number : \")\nprint(f\"The number {number} factorial is: {factorial(number)}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "exam-AV1.questao2",
        "description": "exam-AV1.questao2",
        "peekOfCode": "def tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\ndef removeLessThanAge18(dictionary: dict):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nnumberOfPeople: int = tryParseInt(\"How many people do you want to register?\")\npeoples: dict = {input(\"type your name: \"): tryParseInt(\"type your age: \")",
        "detail": "exam-AV1.questao2",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao2 import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\ndef removeLessThanAge18(dictionary: dict):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nnumberOfPeople: int = tryParseInt(\"How many people do you want to register?\")\npeoples: dict = {input(\"type your name: \"): tryParseInt(\"type your age: \")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "removeLessThanAge18",
        "kind": 2,
        "importPath": "exam-AV1.questao2",
        "description": "exam-AV1.questao2",
        "peekOfCode": "def removeLessThanAge18(dictionary: dict):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nnumberOfPeople: int = tryParseInt(\"How many people do you want to register?\")\npeoples: dict = {input(\"type your name: \"): tryParseInt(\"type your age: \")\n                 for i in range(numberOfPeople)}\nfilteredPeoples: dict = removeLessThanAge18(peoples)\nprint(filteredPeoples)",
        "detail": "exam-AV1.questao2",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao2 import removeLessThanAge18\n```\n\n```python\n\n\n```\n\n```python\ndef removeLessThanAge18(dictionary: dict):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nnumberOfPeople: int = tryParseInt(\"How many people do you want to register?\")\npeoples: dict = {input(\"type your name: \"): tryParseInt(\"type your age: \")\n                 for i in range(numberOfPeople)}\nfilteredPeoples: dict = removeLessThanAge18(peoples)\nprint(filteredPeoples)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "exam-AV1.questao4",
        "description": "exam-AV1.questao4",
        "peekOfCode": "def tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\ndef printEvenNumber(number: int) -> None:\n    if number % 2 == 0:\n        print(number)\ninitialRange: int = tryParseInt(\"type the initial range: \")",
        "detail": "exam-AV1.questao4",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao4 import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\ndef printEvenNumber(number: int) -> None:\n    if number % 2 == 0:\n        print(number)\ninitialRange: int = tryParseInt(\"type the initial range: \")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printEvenNumber",
        "kind": 2,
        "importPath": "exam-AV1.questao4",
        "description": "exam-AV1.questao4",
        "peekOfCode": "def printEvenNumber(number: int) -> None:\n    if number % 2 == 0:\n        print(number)\ninitialRange: int = tryParseInt(\"type the initial range: \")\nfinalRange: int = tryParseInt(\"type the final range: \")\nfor number in range(initialRange, finalRange + 1):\n    printEvenNumber(number)",
        "detail": "exam-AV1.questao4",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao4 import printEvenNumber\n```\n\n```python\n\n\n```\n\n```python\ndef printEvenNumber(number: int) -> None:\n    if number % 2 == 0:\n        print(number)\ninitialRange: int = tryParseInt(\"type the initial range: \")\nfinalRange: int = tryParseInt(\"type the final range: \")\nfor number in range(initialRange, finalRange + 1):\n    printEvenNumber(number)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printIfIsPalindrome",
        "kind": 2,
        "importPath": "exam-AV1.questao5",
        "description": "exam-AV1.questao5",
        "peekOfCode": "def printIfIsPalindrome(word: str) -> None:\n    word = word.lower()\n    reversedWord = word[::-1]\n    if(reversedWord == word):\n        print(f\"The word: {word} is a palindrome \")\nprintIfIsPalindrome(\"ana\")\nprintIfIsPalindrome(\"Carlos\")\nprintIfIsPalindrome(\"Ele\")\nprintIfIsPalindrome(\"Teste\")",
        "detail": "exam-AV1.questao5",
        "documentation": {
            "value": "\n```python\nfrom exam-AV1.questao5 import printIfIsPalindrome\n```\n\n```python\n\n\n```\n\n```python\ndef printIfIsPalindrome(word: str) -> None:\n    word = word.lower()\n    reversedWord = word[::-1]\n    if(reversedWord == word):\n        print(f\"The word: {word} is a palindrome \")\nprintIfIsPalindrome(\"ana\")\nprintIfIsPalindrome(\"Carlos\")\nprintIfIsPalindrome(\"Ele\")\nprintIfIsPalindrome(\"Teste\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pen",
        "kind": 6,
        "importPath": "exam-AV2.questao3",
        "description": "exam-AV2.questao3",
        "peekOfCode": "class Pen:\n    color = None\n    hasInk = None\n    isOpened = None\n    brand = None\n    def __init__(self, color, hasInk, isOpened, brand):\n        self.color = color\n        self.hasInk = hasInk\n        self.isOpened = isOpened\n        self.brand = brand",
        "detail": "exam-AV2.questao3",
        "documentation": {
            "value": "\n```python\nfrom exam-AV2.questao3 import Pen\n```\n\n```python\n\n\n```\n\n```python\nclass Pen:\n    color = None\n    hasInk = None\n    isOpened = None\n    brand = None\n    def __init__(self, color, hasInk, isOpened, brand):\n        self.color = color\n        self.hasInk = hasInk\n        self.isOpened = isOpened\n        self.brand = brand\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pens",
        "kind": 5,
        "importPath": "exam-AV2.questao4",
        "description": "exam-AV2.questao4",
        "peekOfCode": "pens = []\nfor index in range(3):\n    pen = Pen(\n        input(\"Type the color: \"),\n        input(\"This pen has ink?\"),\n        input(\"Is this pen opened?\"),\n        input(\"Type the brand: \")\n    )\n    pens.append(pen)\nfor index, pen in enumerate(pens):",
        "detail": "exam-AV2.questao4",
        "documentation": {
            "value": "\n```python\nfrom exam-AV2.questao4 import pens\n```\n\n```python\n\n\n```\n\n```python\npens = []\nfor index in range(3):\n    pen = Pen(\n        input(\"Type the color: \"),\n        input(\"This pen has ink?\"),\n        input(\"Is this pen opened?\"),\n        input(\"Type the brand: \")\n    )\n    pens.append(pen)\nfor index, pen in enumerate(pens):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Produto",
        "kind": 6,
        "importPath": "exam-AV2.questao5",
        "description": "exam-AV2.questao5",
        "peekOfCode": "class Produto:\n    produtoID = None\n    descricao = None\n    custo = None\n    def __init__(self, produtoID, descricao, custo):\n        self.produtoID = produtoID\n        self.descricao = descricao\n        self.custo = custo\nclass AlbumMusica(Produto):\n    artista = None",
        "detail": "exam-AV2.questao5",
        "documentation": {
            "value": "\n```python\nfrom exam-AV2.questao5 import Produto\n```\n\n```python\n\n\n```\n\n```python\nclass Produto:\n    produtoID = None\n    descricao = None\n    custo = None\n    def __init__(self, produtoID, descricao, custo):\n        self.produtoID = produtoID\n        self.descricao = descricao\n        self.custo = custo\nclass AlbumMusica(Produto):\n    artista = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AlbumMusica",
        "kind": 6,
        "importPath": "exam-AV2.questao5",
        "description": "exam-AV2.questao5",
        "peekOfCode": "class AlbumMusica(Produto):\n    artista = None\n    nomeAlbum = None\n    faixaExecucao = None\n    def __init__(self, produtoID, descricao, custo, artista, nomeAlbum, faixaExecucao):\n        super().__init__(produtoID, descricao, custo)\n        self.artista = artista\n        self.nomeAlbum = nomeAlbum\n        self.faixaExecucao = faixaExecucao\nclass Livro(Produto):",
        "detail": "exam-AV2.questao5",
        "documentation": {
            "value": "\n```python\nfrom exam-AV2.questao5 import AlbumMusica\n```\n\n```python\n\n\n```\n\n```python\nclass AlbumMusica(Produto):\n    artista = None\n    nomeAlbum = None\n    faixaExecucao = None\n    def __init__(self, produtoID, descricao, custo, artista, nomeAlbum, faixaExecucao):\n        super().__init__(produtoID, descricao, custo)\n        self.artista = artista\n        self.nomeAlbum = nomeAlbum\n        self.faixaExecucao = faixaExecucao\nclass Livro(Produto):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Livro",
        "kind": 6,
        "importPath": "exam-AV2.questao5",
        "description": "exam-AV2.questao5",
        "peekOfCode": "class Livro(Produto):\n    autor = None\n    titulo = None\n    isbn = None\n    def __init__(self, produtoID, descricao, custo, autor, titulo, isbn):\n        super().__init__(produtoID, descricao, custo)\n        self.autor = autor\n        self.titulo = titulo\n        self.isbn = isbn",
        "detail": "exam-AV2.questao5",
        "documentation": {
            "value": "\n```python\nfrom exam-AV2.questao5 import Livro\n```\n\n```python\n\n\n```\n\n```python\nclass Livro(Produto):\n    autor = None\n    titulo = None\n    isbn = None\n    def __init__(self, produtoID, descricao, custo, autor, titulo, isbn):\n        super().__init__(produtoID, descricao, custo)\n        self.autor = autor\n        self.titulo = titulo\n        self.isbn = isbn\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Months",
        "kind": 6,
        "importPath": "revision.dictionaryComprehension",
        "description": "revision.dictionaryComprehension",
        "peekOfCode": "class Months(Enum):\n    January = 1\n    February = 2\n    March = 3\n    April = 4\n    May = 5\n    Jun = 6\n    July = 7\n    August = 8\n    September = 9",
        "detail": "revision.dictionaryComprehension",
        "documentation": {
            "value": "\n```python\nfrom revision.dictionaryComprehension import Months\n```\n\n```python\n\n\n```\n\n```python\nclass Months(Enum):\n    January = 1\n    February = 2\n    March = 3\n    April = 4\n    May = 5\n    Jun = 6\n    July = 7\n    August = 8\n    September = 9\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "monthsTemperature",
        "kind": 5,
        "importPath": "revision.dictionaryComprehension",
        "description": "revision.dictionaryComprehension",
        "peekOfCode": "monthsTemperature = {month: int(input(f\"Type the current temperature for {month.name}: \"))\n                     for month in Months}\ntemperaturesSum = sum(monthsTemperature.values())\ntemperaturesAverage = temperaturesSum / 12\nprint(f\" Temperature's total average is : {temperaturesAverage} \")\nprint(\"below the months above average:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")",
        "detail": "revision.dictionaryComprehension",
        "documentation": {
            "value": "\n```python\nfrom revision.dictionaryComprehension import monthsTemperature\n```\n\n```python\n\n\n```\n\n```python\nmonthsTemperature = {month: int(input(f\"Type the current temperature for {month.name}: \"))\n                     for month in Months}\ntemperaturesSum = sum(monthsTemperature.values())\ntemperaturesAverage = temperaturesSum / 12\nprint(f\" Temperature's total average is : {temperaturesAverage} \")\nprint(\"below the months above average:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "temperaturesSum",
        "kind": 5,
        "importPath": "revision.dictionaryComprehension",
        "description": "revision.dictionaryComprehension",
        "peekOfCode": "temperaturesSum = sum(monthsTemperature.values())\ntemperaturesAverage = temperaturesSum / 12\nprint(f\" Temperature's total average is : {temperaturesAverage} \")\nprint(\"below the months above average:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")",
        "detail": "revision.dictionaryComprehension",
        "documentation": {
            "value": "\n```python\nfrom revision.dictionaryComprehension import temperaturesSum\n```\n\n```python\n\n\n```\n\n```python\ntemperaturesSum = sum(monthsTemperature.values())\ntemperaturesAverage = temperaturesSum / 12\nprint(f\" Temperature's total average is : {temperaturesAverage} \")\nprint(\"below the months above average:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "temperaturesAverage",
        "kind": 5,
        "importPath": "revision.dictionaryComprehension",
        "description": "revision.dictionaryComprehension",
        "peekOfCode": "temperaturesAverage = temperaturesSum / 12\nprint(f\" Temperature's total average is : {temperaturesAverage} \")\nprint(\"below the months above average:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")",
        "detail": "revision.dictionaryComprehension",
        "documentation": {
            "value": "\n```python\nfrom revision.dictionaryComprehension import temperaturesAverage\n```\n\n```python\n\n\n```\n\n```python\ntemperaturesAverage = temperaturesSum / 12\nprint(f\" Temperature's total average is : {temperaturesAverage} \")\nprint(\"below the months above average:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "revision.exercise3",
        "description": "revision.exercise3",
        "peekOfCode": "def tryParseInt(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        os._exit(0)\nnumber = None\nflag = qtdNumbers = qtdNumbersEven = qtdNumbersOdd = evenSum = totalSum = 0\nwhile number != flag:\n    number = tryParseInt(input(\"Insira um numero positivo: \"))",
        "detail": "revision.exercise3",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise3 import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        os._exit(0)\nnumber = None\nflag = qtdNumbers = qtdNumbersEven = qtdNumbersOdd = evenSum = totalSum = 0\nwhile number != flag:\n    number = tryParseInt(input(\"Insira um numero positivo: \"))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "revision.exercise3",
        "description": "revision.exercise3",
        "peekOfCode": "number = None\nflag = qtdNumbers = qtdNumbersEven = qtdNumbersOdd = evenSum = totalSum = 0\nwhile number != flag:\n    number = tryParseInt(input(\"Insira um numero positivo: \"))\n    if number % 2 == 0:\n        qtdNumbersEven += 1\n        evenSum += number\n    else:\n        qtdNumbersOdd += 1\n    totalSum += number",
        "detail": "revision.exercise3",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise3 import number\n```\n\n```python\n\n\n```\n\n```python\nnumber = None\nflag = qtdNumbers = qtdNumbersEven = qtdNumbersOdd = evenSum = totalSum = 0\nwhile number != flag:\n    number = tryParseInt(input(\"Insira um numero positivo: \"))\n    if number % 2 == 0:\n        qtdNumbersEven += 1\n        evenSum += number\n    else:\n        qtdNumbersOdd += 1\n    totalSum += number\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "revision.exercise3",
        "description": "revision.exercise3",
        "peekOfCode": "flag = qtdNumbers = qtdNumbersEven = qtdNumbersOdd = evenSum = totalSum = 0\nwhile number != flag:\n    number = tryParseInt(input(\"Insira um numero positivo: \"))\n    if number % 2 == 0:\n        qtdNumbersEven += 1\n        evenSum += number\n    else:\n        qtdNumbersOdd += 1\n    totalSum += number\n    qtdNumbers += 1",
        "detail": "revision.exercise3",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise3 import flag\n```\n\n```python\n\n\n```\n\n```python\nflag = qtdNumbers = qtdNumbersEven = qtdNumbersOdd = evenSum = totalSum = 0\nwhile number != flag:\n    number = tryParseInt(input(\"Insira um numero positivo: \"))\n    if number % 2 == 0:\n        qtdNumbersEven += 1\n        evenSum += number\n    else:\n        qtdNumbersOdd += 1\n    totalSum += number\n    qtdNumbers += 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printMultiplicationTable",
        "kind": 2,
        "importPath": "revision.exercise4",
        "description": "revision.exercise4",
        "peekOfCode": "def printMultiplicationTable(number: int) -> None:\n    for index in range(0, 11):\n        print(f\"{index} x {number} = {number*index}\")\nprintMultiplicationTable(int(input(\"enter a number:\")))",
        "detail": "revision.exercise4",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise4 import printMultiplicationTable\n```\n\n```python\n\n\n```\n\n```python\ndef printMultiplicationTable(number: int) -> None:\n    for index in range(0, 11):\n        print(f\"{index} x {number} = {number*index}\")\nprintMultiplicationTable(int(input(\"enter a number:\")))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Meses",
        "kind": 6,
        "importPath": "revision.exercise5",
        "description": "revision.exercise5",
        "peekOfCode": "class Meses(Enum):\n    Janeiro = 1\n    Fevereiro = 2\n    Marco = 3\n    Abril = 4\n    Maio = 5\n    Junho = 6\n    Julho = 7\n    Agosto = 8\n    Setembro = 9",
        "detail": "revision.exercise5",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise5 import Meses\n```\n\n```python\n\n\n```\n\n```python\nclass Meses(Enum):\n    Janeiro = 1\n    Fevereiro = 2\n    Marco = 3\n    Abril = 4\n    Maio = 5\n    Junho = 6\n    Julho = 7\n    Agosto = 8\n    Setembro = 9\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "monthsTemperature",
        "kind": 5,
        "importPath": "revision.exercise5",
        "description": "revision.exercise5",
        "peekOfCode": "monthsTemperature = {\n    Meses.Janeiro: 0,\n    Meses.Fevereiro: 0,\n    Meses.Marco: 0,\n    Meses.Abril: 0,\n    Meses.Maio: 0,\n    Meses.Junho: 0,\n    Meses.Julho: 0,\n    Meses.Agosto: 0,\n    Meses.Setembro: 0,",
        "detail": "revision.exercise5",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise5 import monthsTemperature\n```\n\n```python\n\n\n```\n\n```python\nmonthsTemperature = {\n    Meses.Janeiro: 0,\n    Meses.Fevereiro: 0,\n    Meses.Marco: 0,\n    Meses.Abril: 0,\n    Meses.Maio: 0,\n    Meses.Junho: 0,\n    Meses.Julho: 0,\n    Meses.Agosto: 0,\n    Meses.Setembro: 0,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "temperaturesSum",
        "kind": 5,
        "importPath": "revision.exercise5",
        "description": "revision.exercise5",
        "peekOfCode": "temperaturesSum = sum(monthsTemperature.values())\ntemperaturesAverage = temperaturesSum / 12\nprint(f\"A média anual das temperaturas é: {temperaturesAverage} \")\nprint(\"abaixo os meses que ficaram acima da média:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")",
        "detail": "revision.exercise5",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise5 import temperaturesSum\n```\n\n```python\n\n\n```\n\n```python\ntemperaturesSum = sum(monthsTemperature.values())\ntemperaturesAverage = temperaturesSum / 12\nprint(f\"A média anual das temperaturas é: {temperaturesAverage} \")\nprint(\"abaixo os meses que ficaram acima da média:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "temperaturesAverage",
        "kind": 5,
        "importPath": "revision.exercise5",
        "description": "revision.exercise5",
        "peekOfCode": "temperaturesAverage = temperaturesSum / 12\nprint(f\"A média anual das temperaturas é: {temperaturesAverage} \")\nprint(\"abaixo os meses que ficaram acima da média:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")",
        "detail": "revision.exercise5",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise5 import temperaturesAverage\n```\n\n```python\n\n\n```\n\n```python\ntemperaturesAverage = temperaturesSum / 12\nprint(f\"A média anual das temperaturas é: {temperaturesAverage} \")\nprint(\"abaixo os meses que ficaram acima da média:\")\nfor month, temperature in monthsTemperature.items():\n    if temperature > temperaturesAverage:\n        print(f\"{month.name} : {temperature}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sumNumbers",
        "kind": 5,
        "importPath": "revision.exercise6",
        "description": "revision.exercise6",
        "peekOfCode": "sumNumbers = 0\nfor number in range(101):\n    sumNumbers += number\nprint(sumNumbers)",
        "detail": "revision.exercise6",
        "documentation": {
            "value": "\n```python\nfrom revision.exercise6 import sumNumbers\n```\n\n```python\n\n\n```\n\n```python\nsumNumbers = 0\nfor number in range(101):\n    sumNumbers += number\nprint(sumNumbers)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "aula1",
        "description": "aula1",
        "peekOfCode": "name = input(\"Type your name: \")\nearthShape = input(\"For you earth shape is? \")\nprint(f\" For {name} Earth is {earthShape}\")\n# Verificando se o numero é maior\nresults = [\"Menor\", \"Maior\"]\nx, y = 9, 10\nprint(results[x > y])",
        "detail": "aula1",
        "documentation": {
            "value": "\n```python\nfrom aula1 import name\n```\n\n```python\n\n\n```\n\n```python\nname = input(\"Type your name: \")\nearthShape = input(\"For you earth shape is? \")\nprint(f\" For {name} Earth is {earthShape}\")\n# Verificando se o numero é maior\nresults = [\"Menor\", \"Maior\"]\nx, y = 9, 10\nprint(results[x > y])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "earthShape",
        "kind": 5,
        "importPath": "aula1",
        "description": "aula1",
        "peekOfCode": "earthShape = input(\"For you earth shape is? \")\nprint(f\" For {name} Earth is {earthShape}\")\n# Verificando se o numero é maior\nresults = [\"Menor\", \"Maior\"]\nx, y = 9, 10\nprint(results[x > y])",
        "detail": "aula1",
        "documentation": {
            "value": "\n```python\nfrom aula1 import earthShape\n```\n\n```python\n\n\n```\n\n```python\nearthShape = input(\"For you earth shape is? \")\nprint(f\" For {name} Earth is {earthShape}\")\n# Verificando se o numero é maior\nresults = [\"Menor\", \"Maior\"]\nx, y = 9, 10\nprint(results[x > y])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "aula1",
        "description": "aula1",
        "peekOfCode": "results = [\"Menor\", \"Maior\"]\nx, y = 9, 10\nprint(results[x > y])",
        "detail": "aula1",
        "documentation": {
            "value": "\n```python\nfrom aula1 import results\n```\n\n```python\n\n\n```\n\n```python\nresults = [\"Menor\", \"Maior\"]\nx, y = 9, 10\nprint(results[x > y])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Computer",
        "kind": 6,
        "importPath": "creating-class",
        "description": "creating-class",
        "peekOfCode": "class Computer:\n    Quantity = 0\n    def __init__(self, brand, memory, graphicCard):\n        self.Brand = brand\n        self.Memory = memory\n        self.GraphicCard = graphicCard\n        self.StateOn = \"Turning on....\"\n        self.StateOff = \"Turning off....\"\n        Computer.Quantity += 1\n    def TurnOn(self):",
        "detail": "creating-class",
        "documentation": {
            "value": "\n```python\nfrom creating-class import Computer\n```\n\n```python\n\n\n```\n\n```python\nclass Computer:\n    Quantity = 0\n    def __init__(self, brand, memory, graphicCard):\n        self.Brand = brand\n        self.Memory = memory\n        self.GraphicCard = graphicCard\n        self.StateOn = \"Turning on....\"\n        self.StateOff = \"Turning off....\"\n        Computer.Quantity += 1\n    def TurnOn(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "computers",
        "kind": 5,
        "importPath": "creating-class",
        "description": "creating-class",
        "peekOfCode": "computers = [\n    Computer(\"Asus\", \"6GB\", \"RX570\"),\n    Computer(\"RG\", \"8GB\", \"Teste\"),\n    Computer(\"LG\", \"4GB\", \"Teste\")\n]\nfor index, computer in enumerate(computers):\n    print(f\"Computer {index + 1} - {computer.ShowThisComputerInformation()}\")\nprint(Computer.Quantity)",
        "detail": "creating-class",
        "documentation": {
            "value": "\n```python\nfrom creating-class import computers\n```\n\n```python\n\n\n```\n\n```python\ncomputers = [\n    Computer(\"Asus\", \"6GB\", \"RX570\"),\n    Computer(\"RG\", \"8GB\", \"Teste\"),\n    Computer(\"LG\", \"4GB\", \"Teste\")\n]\nfor index, computer in enumerate(computers):\n    print(f\"Computer {index + 1} - {computer.ShowThisComputerInformation()}\")\nprint(Computer.Quantity)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "even-odd",
        "description": "even-odd",
        "peekOfCode": "def tryParseInt(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        os._exit(0)\ndef isEvenOrOdd(number):\n    types = [\"Even\", \"Odd\"]\n    parsedNumber = tryParseInt(number)\n    parsedNumber = parsedNumber % 2 != 0",
        "detail": "even-odd",
        "documentation": {
            "value": "\n```python\nfrom even-odd import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        os._exit(0)\ndef isEvenOrOdd(number):\n    types = [\"Even\", \"Odd\"]\n    parsedNumber = tryParseInt(number)\n    parsedNumber = parsedNumber % 2 != 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isEvenOrOdd",
        "kind": 2,
        "importPath": "even-odd",
        "description": "even-odd",
        "peekOfCode": "def isEvenOrOdd(number):\n    types = [\"Even\", \"Odd\"]\n    parsedNumber = tryParseInt(number)\n    parsedNumber = parsedNumber % 2 != 0\n    return types[parsedNumber]\nprint(isEvenOrOdd(2))\nprint(isEvenOrOdd(1))",
        "detail": "even-odd",
        "documentation": {
            "value": "\n```python\nfrom even-odd import isEvenOrOdd\n```\n\n```python\n\n\n```\n\n```python\ndef isEvenOrOdd(number):\n    types = [\"Even\", \"Odd\"]\n    parsedNumber = tryParseInt(number)\n    parsedNumber = parsedNumber % 2 != 0\n    return types[parsedNumber]\nprint(isEvenOrOdd(2))\nprint(isEvenOrOdd(1))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getUserInput",
        "kind": 2,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "def getUserInput(message=\"Write the fruit name: \"):\n    return input(message)\nfruit1 = {\"name\": getUserInput(), \"value\": getUserInput(\"Write de price: \")}\nfruit2 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) * 2}\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import getUserInput\n```\n\n```python\n\n\n```\n\n```python\ndef getUserInput(message=\"Write the fruit name: \"):\n    return input(message)\nfruit1 = {\"name\": getUserInput(), \"value\": getUserInput(\"Write de price: \")}\nfruit2 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) * 2}\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruit1",
        "kind": 5,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "fruit1 = {\"name\": getUserInput(), \"value\": getUserInput(\"Write de price: \")}\nfruit2 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) * 2}\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import fruit1\n```\n\n```python\n\n\n```\n\n```python\nfruit1 = {\"name\": getUserInput(), \"value\": getUserInput(\"Write de price: \")}\nfruit2 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) * 2}\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruit2",
        "kind": 5,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "fruit2 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) * 2}\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import fruit2\n```\n\n```python\n\n\n```\n\n```python\nfruit2 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) * 2}\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruit3",
        "kind": 5,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "fruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import fruit3\n```\n\n```python\n\n\n```\n\n```python\nfruit3 = {\"name\": getUserInput(), \"value\": float(fruit1['value']) / 2}\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruit4",
        "kind": 5,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "fruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import fruit4\n```\n\n```python\n\n\n```\n\n```python\nfruit4 = {\"name\": getUserInput(), \"value\": (float(fruit1['value']) / 2) * 3}\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruit5",
        "kind": 5,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "fruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import fruit5\n```\n\n```python\n\n\n```\n\n```python\nfruit5 = {\"name\": getUserInput(), \"value\": (\n    (float(fruit1['value']) / 2) * 3) / 2}\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "exercicio-pag18-dinamic",
        "description": "exercicio-pag18-dinamic",
        "peekOfCode": "fruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18-dinamic",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18-dinamic import fruits\n```\n\n```python\n\n\n```\n\n```python\nfruits = [fruit1, fruit2, fruit3, fruit4, fruit5]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getFruitName",
        "kind": 2,
        "importPath": "exercicio-pag18",
        "description": "exercicio-pag18",
        "peekOfCode": "def getFruitName():\n    return input(\"Write the fruit name: \")\nfruits = [\n    {\"name\": getFruitName(), \"value\": 1.00},\n    {\"name\": getFruitName(), \"value\": 1.00 * 2},\n    {\"name\": getFruitName(), \"value\": 1.00 / 2},\n    {\"name\": getFruitName(), \"value\": (1.00 / 2) * 3},\n    {\"name\": getFruitName(), \"value\": ((1.00 / 2) * 3) / 2}]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18 import getFruitName\n```\n\n```python\n\n\n```\n\n```python\ndef getFruitName():\n    return input(\"Write the fruit name: \")\nfruits = [\n    {\"name\": getFruitName(), \"value\": 1.00},\n    {\"name\": getFruitName(), \"value\": 1.00 * 2},\n    {\"name\": getFruitName(), \"value\": 1.00 / 2},\n    {\"name\": getFruitName(), \"value\": (1.00 / 2) * 3},\n    {\"name\": getFruitName(), \"value\": ((1.00 / 2) * 3) / 2}]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "exercicio-pag18",
        "description": "exercicio-pag18",
        "peekOfCode": "fruits = [\n    {\"name\": getFruitName(), \"value\": 1.00},\n    {\"name\": getFruitName(), \"value\": 1.00 * 2},\n    {\"name\": getFruitName(), \"value\": 1.00 / 2},\n    {\"name\": getFruitName(), \"value\": (1.00 / 2) * 3},\n    {\"name\": getFruitName(), \"value\": ((1.00 / 2) * 3) / 2}]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")",
        "detail": "exercicio-pag18",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag18 import fruits\n```\n\n```python\n\n\n```\n\n```python\nfruits = [\n    {\"name\": getFruitName(), \"value\": 1.00},\n    {\"name\": getFruitName(), \"value\": 1.00 * 2},\n    {\"name\": getFruitName(), \"value\": 1.00 / 2},\n    {\"name\": getFruitName(), \"value\": (1.00 / 2) * 3},\n    {\"name\": getFruitName(), \"value\": ((1.00 / 2) * 3) / 2}]\nfor fruit in fruits:\n    print(f\" Fruit {fruit['name']} costs {fruit['value']} R$\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "exercicio-pag23",
        "description": "exercicio-pag23",
        "peekOfCode": "person = {\n    \"Name\": \"Gleison\",\n    \"LastName\": \"Almeida\",\n    'Age': 26,\n    \"Course\": \"Sistemas de Informação\",\n    \"Address\": \"Rua D, padrão 105 casa 07 - Betania\"\n}\nprint(person)\nprint(person['Name'])\nprint(person['LastName'])",
        "detail": "exercicio-pag23",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag23 import person\n```\n\n```python\n\n\n```\n\n```python\nperson = {\n    \"Name\": \"Gleison\",\n    \"LastName\": \"Almeida\",\n    'Age': 26,\n    \"Course\": \"Sistemas de Informação\",\n    \"Address\": \"Rua D, padrão 105 casa 07 - Betania\"\n}\nprint(person)\nprint(person['Name'])\nprint(person['LastName'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "person['LastName']",
        "kind": 5,
        "importPath": "exercicio-pag23",
        "description": "exercicio-pag23",
        "peekOfCode": "person['LastName'] = \"Lopes\"\nprint(person)\nprint(person['Address'])\nnewPerson = person.copy()\nnewPerson['Name'] = 'Renato'\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)",
        "detail": "exercicio-pag23",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag23 import person['LastName']\n```\n\n```python\n\n\n```\n\n```python\nperson['LastName'] = \"Lopes\"\nprint(person)\nprint(person['Address'])\nnewPerson = person.copy()\nnewPerson['Name'] = 'Renato'\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newPerson",
        "kind": 5,
        "importPath": "exercicio-pag23",
        "description": "exercicio-pag23",
        "peekOfCode": "newPerson = person.copy()\nnewPerson['Name'] = 'Renato'\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)",
        "detail": "exercicio-pag23",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag23 import newPerson\n```\n\n```python\n\n\n```\n\n```python\nnewPerson = person.copy()\nnewPerson['Name'] = 'Renato'\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newPerson['Name']",
        "kind": 5,
        "importPath": "exercicio-pag23",
        "description": "exercicio-pag23",
        "peekOfCode": "newPerson['Name'] = 'Renato'\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)",
        "detail": "exercicio-pag23",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag23 import newPerson['Name']\n```\n\n```python\n\n\n```\n\n```python\nnewPerson['Name'] = 'Renato'\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "newPerson['Age']",
        "kind": 5,
        "importPath": "exercicio-pag23",
        "description": "exercicio-pag23",
        "peekOfCode": "newPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)",
        "detail": "exercicio-pag23",
        "documentation": {
            "value": "\n```python\nfrom exercicio-pag23 import newPerson['Age']\n```\n\n```python\n\n\n```\n\n```python\nnewPerson['Age'] = 20\nprint(newPerson)\nprint(person.values)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getUserValue",
        "kind": 2,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "def getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\ngetUserValue(items, quantity, 2)\ngetUserValue(items, quantity, 3)",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import getUserValue\n```\n\n```python\n\n\n```\n\n```python\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\ngetUserValue(items, quantity, 2)\ngetUserValue(items, quantity, 3)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printValues",
        "kind": 2,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "def printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\ngetUserValue(items, quantity, 2)\ngetUserValue(items, quantity, 3)\ngetUserValue(items, quantity, 4)\nprintValues(items, quantity, 0)\nprintValues(items, quantity, 1)",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import printValues\n```\n\n```python\n\n\n```\n\n```python\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\ngetUserValue(items, quantity, 2)\ngetUserValue(items, quantity, 3)\ngetUserValue(items, quantity, 4)\nprintValues(items, quantity, 0)\nprintValues(items, quantity, 1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "def tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\nitems = [{\n    \"key\": input(\"Informe um item: \"),\n    \"value\": tryParseInt(\"Qual a quantidade? \")}\n    for item in range(5)]",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\nitems = [{\n    \"key\": input(\"Informe um item: \"),\n    \"value\": tryParseInt(\"Qual a quantidade? \")}\n    for item in range(5)]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "number = input(\"Type a number: \")\nprint(f\"The number typed was {number}\")\n# Exercicio 03 - sem estrutura de repetição\nitems = [None] * 5\nquantity = [None] * 5\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import number\n```\n\n```python\n\n\n```\n\n```python\nnumber = input(\"Type a number: \")\nprint(f\"The number typed was {number}\")\n# Exercicio 03 - sem estrutura de repetição\nitems = [None] * 5\nquantity = [None] * 5\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "items = [None] * 5\nquantity = [None] * 5\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import items\n```\n\n```python\n\n\n```\n\n```python\nitems = [None] * 5\nquantity = [None] * 5\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quantity",
        "kind": 5,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "quantity = [None] * 5\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\ngetUserValue(items, quantity, 2)",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import quantity\n```\n\n```python\n\n\n```\n\n```python\nquantity = [None] * 5\ndef getUserValue(items, quantity, position):\n    items[position] = input(\"Informe um item: \")\n    quantity[position] = input(\"Qual a quantidade?\")\ndef printValues(items, quantity, position):\n    print(\n        f\"Item {position + 1} - {items[position]} | Qtd: {quantity[position]}\")\ngetUserValue(items, quantity, 0)\ngetUserValue(items, quantity, 1)\ngetUserValue(items, quantity, 2)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "exercicios-pag15",
        "description": "exercicios-pag15",
        "peekOfCode": "items = [{\n    \"key\": input(\"Informe um item: \"),\n    \"value\": tryParseInt(\"Qual a quantidade? \")}\n    for item in range(5)]\nfor index, item in enumerate(items):\n    print(f\"Item {index + 1} | Value: {item['key']} | Qtd: {item['value']}\")",
        "detail": "exercicios-pag15",
        "documentation": {
            "value": "\n```python\nfrom exercicios-pag15 import items\n```\n\n```python\n\n\n```\n\n```python\nitems = [{\n    \"key\": input(\"Informe um item: \"),\n    \"value\": tryParseInt(\"Qual a quantidade? \")}\n    for item in range(5)]\nfor index, item in enumerate(items):\n    print(f\"Item {index + 1} | Value: {item['key']} | Qtd: {item['value']}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PlayerState",
        "kind": 6,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "class PlayerState(Enum):\n    WINNER = \"Congratulations, You Guess Right!\"\n    MISS = \"You're wrong try again!\"\n    LOOSER = \"You loose, I thought in another number\"\nclass LevelState(Enum):\n    EASY = 1\n    HARD = 2\ndef exitGame():\n    loading(\"LEAVING\")\n    os._exit(0)",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import PlayerState\n```\n\n```python\n\n\n```\n\n```python\nclass PlayerState(Enum):\n    WINNER = \"Congratulations, You Guess Right!\"\n    MISS = \"You're wrong try again!\"\n    LOOSER = \"You loose, I thought in another number\"\nclass LevelState(Enum):\n    EASY = 1\n    HARD = 2\ndef exitGame():\n    loading(\"LEAVING\")\n    os._exit(0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LevelState",
        "kind": 6,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "class LevelState(Enum):\n    EASY = 1\n    HARD = 2\ndef exitGame():\n    loading(\"LEAVING\")\n    os._exit(0)\ndef loading(message):\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import LevelState\n```\n\n```python\n\n\n```\n\n```python\nclass LevelState(Enum):\n    EASY = 1\n    HARD = 2\ndef exitGame():\n    loading(\"LEAVING\")\n    os._exit(0)\ndef loading(message):\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exitGame",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def exitGame():\n    loading(\"LEAVING\")\n    os._exit(0)\ndef loading(message):\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import exitGame\n```\n\n```python\n\n\n```\n\n```python\ndef exitGame():\n    loading(\"LEAVING\")\n    os._exit(0)\ndef loading(message):\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "loading",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def loading(message):\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n        sleep(0.2)\n        pass\ndef isGuessRight(playerOption, cpuOption, remainingChances):",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import loading\n```\n\n```python\n\n\n```\n\n```python\ndef loading(message):\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n        sleep(0.2)\n        pass\ndef isGuessRight(playerOption, cpuOption, remainingChances):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isGuessRight",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def isGuessRight(playerOption, cpuOption, remainingChances):\n    outputs = {\n        playerOption == cpuOption[0]: PlayerState.WINNER,\n        playerOption != cpuOption[0] and remainingChances > 1: PlayerState.MISS,\n        playerOption != cpuOption[0] and remainingChances == 1: PlayerState.LOOSER\n    }\n    return outputs[True]\ndef validateInput(value):\n    try:\n        return int(value)",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import isGuessRight\n```\n\n```python\n\n\n```\n\n```python\ndef isGuessRight(playerOption, cpuOption, remainingChances):\n    outputs = {\n        playerOption == cpuOption[0]: PlayerState.WINNER,\n        playerOption != cpuOption[0] and remainingChances > 1: PlayerState.MISS,\n        playerOption != cpuOption[0] and remainingChances == 1: PlayerState.LOOSER\n    }\n    return outputs[True]\ndef validateInput(value):\n    try:\n        return int(value)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validateInput",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def validateInput(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        exitGame()\ndef doNothing():\n    pass\ndef isGameFinished(status):\n    outputs = {",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import validateInput\n```\n\n```python\n\n\n```\n\n```python\ndef validateInput(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        exitGame()\ndef doNothing():\n    pass\ndef isGameFinished(status):\n    outputs = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "doNothing",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def doNothing():\n    pass\ndef isGameFinished(status):\n    outputs = {\n        PlayerState.WINNER: exitGame,\n        PlayerState.LOOSER: doNothing,\n        PlayerState.MISS: doNothing\n    }\n    outputs[status]()\ndef refreshCpuChoice(level, choice):",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import doNothing\n```\n\n```python\n\n\n```\n\n```python\ndef doNothing():\n    pass\ndef isGameFinished(status):\n    outputs = {\n        PlayerState.WINNER: exitGame,\n        PlayerState.LOOSER: doNothing,\n        PlayerState.MISS: doNothing\n    }\n    outputs[status]()\ndef refreshCpuChoice(level, choice):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isGameFinished",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def isGameFinished(status):\n    outputs = {\n        PlayerState.WINNER: exitGame,\n        PlayerState.LOOSER: doNothing,\n        PlayerState.MISS: doNothing\n    }\n    outputs[status]()\ndef refreshCpuChoice(level, choice):\n    refresh = {\n        LevelState.EASY: choice[0],",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import isGameFinished\n```\n\n```python\n\n\n```\n\n```python\ndef isGameFinished(status):\n    outputs = {\n        PlayerState.WINNER: exitGame,\n        PlayerState.LOOSER: doNothing,\n        PlayerState.MISS: doNothing\n    }\n    outputs[status]()\ndef refreshCpuChoice(level, choice):\n    refresh = {\n        LevelState.EASY: choice[0],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "refreshCpuChoice",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def refreshCpuChoice(level, choice):\n    refresh = {\n        LevelState.EASY: choice[0],\n        LevelState.HARD: randint(1, 5)\n    }\n    choice[0] = refresh[level]\ndef convertInputToInt(message):\n    value = input(message)\n    return validateInput(value)\nplayerRemainingTries = 3",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import refreshCpuChoice\n```\n\n```python\n\n\n```\n\n```python\ndef refreshCpuChoice(level, choice):\n    refresh = {\n        LevelState.EASY: choice[0],\n        LevelState.HARD: randint(1, 5)\n    }\n    choice[0] = refresh[level]\ndef convertInputToInt(message):\n    value = input(message)\n    return validateInput(value)\nplayerRemainingTries = 3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "convertInputToInt",
        "kind": 2,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "def convertInputToInt(message):\n    value = input(message)\n    return validateInput(value)\nplayerRemainingTries = 3\nos.system('cls||clear')\ncpuChoice = [randint(1, 5)]\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import convertInputToInt\n```\n\n```python\n\n\n```\n\n```python\ndef convertInputToInt(message):\n    value = input(message)\n    return validateInput(value)\nplayerRemainingTries = 3\nos.system('cls||clear')\ncpuChoice = [randint(1, 5)]\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "playerRemainingTries",
        "kind": 5,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "playerRemainingTries = 3\nos.system('cls||clear')\ncpuChoice = [randint(1, 5)]\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import playerRemainingTries\n```\n\n```python\n\n\n```\n\n```python\nplayerRemainingTries = 3\nos.system('cls||clear')\ncpuChoice = [randint(1, 5)]\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cpuChoice",
        "kind": 5,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "cpuChoice = [randint(1, 5)]\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n    playerChoice = input(\"In what number did I think?\")\n    playerChoice = validateInput(playerChoice)",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import cpuChoice\n```\n\n```python\n\n\n```\n\n```python\ncpuChoice = [randint(1, 5)]\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n    playerChoice = input(\"In what number did I think?\")\n    playerChoice = validateInput(playerChoice)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "userInputLevel",
        "kind": 5,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "userInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n    playerChoice = input(\"In what number did I think?\")\n    playerChoice = validateInput(playerChoice)\n    loading(\"LOADING\")",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import userInputLevel\n```\n\n```python\n\n\n```\n\n```python\nuserInputLevel = convertInputToInt(\n    \"Choose the level game: [1] = EASY [2] = HARD: \")\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n    playerChoice = input(\"In what number did I think?\")\n    playerChoice = validateInput(playerChoice)\n    loading(\"LOADING\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "currentLevel",
        "kind": 5,
        "importPath": "guessingGame",
        "description": "guessingGame",
        "peekOfCode": "currentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n    playerChoice = input(\"In what number did I think?\")\n    playerChoice = validateInput(playerChoice)\n    loading(\"LOADING\")\n    isRight = isGuessRight(playerChoice, cpuChoice, playerRemainingTries)\n    infoMessage = isRight.value",
        "detail": "guessingGame",
        "documentation": {
            "value": "\n```python\nfrom guessingGame import currentLevel\n```\n\n```python\n\n\n```\n\n```python\ncurrentLevel = LevelState(userInputLevel)\nprint(\"I'll think a number between 1 and 5!, TRY TO GUESS...\")\nsleep(2)\nwhile playerRemainingTries > 0:\n    refreshCpuChoice(currentLevel, cpuChoice)\n    playerChoice = input(\"In what number did I think?\")\n    playerChoice = validateInput(playerChoice)\n    loading(\"LOADING\")\n    isRight = isGuessRight(playerChoice, cpuChoice, playerRemainingTries)\n    infoMessage = isRight.value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NumberState",
        "kind": 6,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "class NumberState(Enum):\n    Hot = \"It's hot, it's hot\"\n    Cold = \"It's hot, it's hot\"\ndef exitGame(message: str) -> None:\n    print(message)\n    loading(\"LEAVING\")\n    os._exit(0)\ndef showNumberState(numberState: NumberState):\n    print(numberState.value)\ndef youLoose(number: int) -> None:",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import NumberState\n```\n\n```python\n\n\n```\n\n```python\nclass NumberState(Enum):\n    Hot = \"It's hot, it's hot\"\n    Cold = \"It's hot, it's hot\"\ndef exitGame(message: str) -> None:\n    print(message)\n    loading(\"LEAVING\")\n    os._exit(0)\ndef showNumberState(numberState: NumberState):\n    print(numberState.value)\ndef youLoose(number: int) -> None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exitGame",
        "kind": 2,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "def exitGame(message: str) -> None:\n    print(message)\n    loading(\"LEAVING\")\n    os._exit(0)\ndef showNumberState(numberState: NumberState):\n    print(numberState.value)\ndef youLoose(number: int) -> None:\n    exitGame(f\"You loose, I thought in {number}\")\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import exitGame\n```\n\n```python\n\n\n```\n\n```python\ndef exitGame(message: str) -> None:\n    print(message)\n    loading(\"LEAVING\")\n    os._exit(0)\ndef showNumberState(numberState: NumberState):\n    print(numberState.value)\ndef youLoose(number: int) -> None:\n    exitGame(f\"You loose, I thought in {number}\")\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "showNumberState",
        "kind": 2,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "def showNumberState(numberState: NumberState):\n    print(numberState.value)\ndef youLoose(number: int) -> None:\n    exitGame(f\"You loose, I thought in {number}\")\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import showNumberState\n```\n\n```python\n\n\n```\n\n```python\ndef showNumberState(numberState: NumberState):\n    print(numberState.value)\ndef youLoose(number: int) -> None:\n    exitGame(f\"You loose, I thought in {number}\")\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "youLoose",
        "kind": 2,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "def youLoose(number: int) -> None:\n    exitGame(f\"You loose, I thought in {number}\")\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import youLoose\n```\n\n```python\n\n\n```\n\n```python\ndef youLoose(number: int) -> None:\n    exitGame(f\"You loose, I thought in {number}\")\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "youWin",
        "kind": 2,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "def youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n        sleep(0.2)",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import youWin\n```\n\n```python\n\n\n```\n\n```python\ndef youWin() -> None:\n    exitGame(\"Congratulations, You Guess Right!\")\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n        sleep(0.2)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "loading",
        "kind": 2,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "def loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n        sleep(0.2)\n        pass\ndef tryParseInt(message: str) -> int:",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import loading\n```\n\n```python\n\n\n```\n\n```python\ndef loading(message: str) -> None:\n    for index in range(8):\n        dots = [\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n        ]\n        print(f\"{dots[index]}\", end=\"\\r\")\n        sleep(0.2)\n        pass\ndef tryParseInt(message: str) -> int:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "guessingGameExercise",
        "description": "guessingGameExercise",
        "peekOfCode": "def tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\nplayerRemainingTries: int = 3\nfactor: int = 5\nos.system('cls||clear')\ncpuChoice: int = randint(1, 100)",
        "detail": "guessingGameExercise",
        "documentation": {
            "value": "\n```python\nfrom guessingGameExercise import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message: str) -> int:\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\nplayerRemainingTries: int = 3\nfactor: int = 5\nos.system('cls||clear')\ncpuChoice: int = randint(1, 100)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "list-comprehension",
        "description": "list-comprehension",
        "peekOfCode": "def tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\nitems = [{\"key\": input(\"Item name: \"), \"value\": tryParseInt(\n    \"Quantity: \")} for item in range(5)]\nfor index, item in enumerate(items):\n    print(f\"Item {index + 1} | Value: {item['key']} | Qtd: {item['value']}\")",
        "detail": "list-comprehension",
        "documentation": {
            "value": "\n```python\nfrom list-comprehension import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\nitems = [{\"key\": input(\"Item name: \"), \"value\": tryParseInt(\n    \"Quantity: \")} for item in range(5)]\nfor index, item in enumerate(items):\n    print(f\"Item {index + 1} | Value: {item['key']} | Qtd: {item['value']}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "list-comprehension",
        "description": "list-comprehension",
        "peekOfCode": "items = [{\"key\": input(\"Item name: \"), \"value\": tryParseInt(\n    \"Quantity: \")} for item in range(5)]\nfor index, item in enumerate(items):\n    print(f\"Item {index + 1} | Value: {item['key']} | Qtd: {item['value']}\")",
        "detail": "list-comprehension",
        "documentation": {
            "value": "\n```python\nfrom list-comprehension import items\n```\n\n```python\n\n\n```\n\n```python\nitems = [{\"key\": input(\"Item name: \"), \"value\": tryParseInt(\n    \"Quantity: \")} for item in range(5)]\nfor index, item in enumerate(items):\n    print(f\"Item {index + 1} | Value: {item['key']} | Qtd: {item['value']}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "printMultiplicationTable",
        "kind": 2,
        "importPath": "multiplicationTable",
        "description": "multiplicationTable",
        "peekOfCode": "def printMultiplicationTable(number: int) -> None:\n    for index in range(1, 11):\n        print(f\"{number} x {index} = {number*index}\")\nprintMultiplicationTable(int(input(\"enter a number:\")))",
        "detail": "multiplicationTable",
        "documentation": {
            "value": "\n```python\nfrom multiplicationTable import printMultiplicationTable\n```\n\n```python\n\n\n```\n\n```python\ndef printMultiplicationTable(number: int) -> None:\n    for index in range(1, 11):\n        print(f\"{number} x {index} = {number*index}\")\nprintMultiplicationTable(int(input(\"enter a number:\")))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "nameAndAge",
        "description": "nameAndAge",
        "peekOfCode": "def tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\npeoples = {input(\"type a name: \"): tryParseInt(\"type an age: \") for i in range(3)}\ndef removeLessThanAge18(dictionary):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nfilteredPeoples = removeLessThanAge18(peoples)",
        "detail": "nameAndAge",
        "documentation": {
            "value": "\n```python\nfrom nameAndAge import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\npeoples = {input(\"type a name: \"): tryParseInt(\"type an age: \") for i in range(3)}\ndef removeLessThanAge18(dictionary):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nfilteredPeoples = removeLessThanAge18(peoples)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "removeLessThanAge18",
        "kind": 2,
        "importPath": "nameAndAge",
        "description": "nameAndAge",
        "peekOfCode": "def removeLessThanAge18(dictionary):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nfilteredPeoples = removeLessThanAge18(peoples)",
        "detail": "nameAndAge",
        "documentation": {
            "value": "\n```python\nfrom nameAndAge import removeLessThanAge18\n```\n\n```python\n\n\n```\n\n```python\ndef removeLessThanAge18(dictionary):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nfilteredPeoples = removeLessThanAge18(peoples)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "peoples",
        "kind": 5,
        "importPath": "nameAndAge",
        "description": "nameAndAge",
        "peekOfCode": "peoples = {input(\"type a name: \"): tryParseInt(\"type an age: \") for i in range(3)}\ndef removeLessThanAge18(dictionary):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nfilteredPeoples = removeLessThanAge18(peoples)",
        "detail": "nameAndAge",
        "documentation": {
            "value": "\n```python\nfrom nameAndAge import peoples\n```\n\n```python\n\n\n```\n\n```python\npeoples = {input(\"type a name: \"): tryParseInt(\"type an age: \") for i in range(3)}\ndef removeLessThanAge18(dictionary):\n    return {name: age for (name, age) in dictionary.items() if age >= 18}\nfilteredPeoples = removeLessThanAge18(peoples)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "filteredPeoples",
        "kind": 5,
        "importPath": "nameAndAge",
        "description": "nameAndAge",
        "peekOfCode": "filteredPeoples = removeLessThanAge18(peoples)",
        "detail": "nameAndAge",
        "documentation": {
            "value": "\n```python\nfrom nameAndAge import filteredPeoples\n```\n\n```python\n\n\n```\n\n```python\nfilteredPeoples = removeLessThanAge18(peoples)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "nameAndAgeTest",
        "description": "nameAndAgeTest",
        "peekOfCode": "def tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\npeoples = [{\"name\": input(\"type a name: \"), \"age\": tryParseInt(\n    \"type an age: \")} for item in range(3)]\nprint(peoples)\ndef removeLessThanAge18(dictionary):",
        "detail": "nameAndAgeTest",
        "documentation": {
            "value": "\n```python\nfrom nameAndAgeTest import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(message):\n    try:\n        return int(input(message))\n    except ValueError:\n        print(\"You must be input a integer value.\")\n        return tryParseInt(message)\npeoples = [{\"name\": input(\"type a name: \"), \"age\": tryParseInt(\n    \"type an age: \")} for item in range(3)]\nprint(peoples)\ndef removeLessThanAge18(dictionary):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "removeLessThanAge18",
        "kind": 2,
        "importPath": "nameAndAgeTest",
        "description": "nameAndAgeTest",
        "peekOfCode": "def removeLessThanAge18(dictionary):\n    return [{age for (age) in people.items() if people['age'] >= 18} for people in peoples]\nfilteredPeoples = removeLessThanAge18(peoples)\nfor item in enumerate(filteredPeoples):\n    print(item)",
        "detail": "nameAndAgeTest",
        "documentation": {
            "value": "\n```python\nfrom nameAndAgeTest import removeLessThanAge18\n```\n\n```python\n\n\n```\n\n```python\ndef removeLessThanAge18(dictionary):\n    return [{age for (age) in people.items() if people['age'] >= 18} for people in peoples]\nfilteredPeoples = removeLessThanAge18(peoples)\nfor item in enumerate(filteredPeoples):\n    print(item)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "peoples",
        "kind": 5,
        "importPath": "nameAndAgeTest",
        "description": "nameAndAgeTest",
        "peekOfCode": "peoples = [{\"name\": input(\"type a name: \"), \"age\": tryParseInt(\n    \"type an age: \")} for item in range(3)]\nprint(peoples)\ndef removeLessThanAge18(dictionary):\n    return [{age for (age) in people.items() if people['age'] >= 18} for people in peoples]\nfilteredPeoples = removeLessThanAge18(peoples)\nfor item in enumerate(filteredPeoples):\n    print(item)",
        "detail": "nameAndAgeTest",
        "documentation": {
            "value": "\n```python\nfrom nameAndAgeTest import peoples\n```\n\n```python\n\n\n```\n\n```python\npeoples = [{\"name\": input(\"type a name: \"), \"age\": tryParseInt(\n    \"type an age: \")} for item in range(3)]\nprint(peoples)\ndef removeLessThanAge18(dictionary):\n    return [{age for (age) in people.items() if people['age'] >= 18} for people in peoples]\nfilteredPeoples = removeLessThanAge18(peoples)\nfor item in enumerate(filteredPeoples):\n    print(item)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "filteredPeoples",
        "kind": 5,
        "importPath": "nameAndAgeTest",
        "description": "nameAndAgeTest",
        "peekOfCode": "filteredPeoples = removeLessThanAge18(peoples)\nfor item in enumerate(filteredPeoples):\n    print(item)",
        "detail": "nameAndAgeTest",
        "documentation": {
            "value": "\n```python\nfrom nameAndAgeTest import filteredPeoples\n```\n\n```python\n\n\n```\n\n```python\nfilteredPeoples = removeLessThanAge18(peoples)\nfor item in enumerate(filteredPeoples):\n    print(item)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "immutableSet",
        "kind": 5,
        "importPath": "randomClass",
        "description": "randomClass",
        "peekOfCode": "immutableSet = set([randrange(0, 100, 10) for _ in range(0, 100)])\nprint(immutableSet)",
        "detail": "randomClass",
        "documentation": {
            "value": "\n```python\nfrom randomClass import immutableSet\n```\n\n```python\n\n\n```\n\n```python\nimmutableSet = set([randrange(0, 100, 10) for _ in range(0, 100)])\nprint(immutableSet)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getStudentStatus",
        "kind": 2,
        "importPath": "statusStudent",
        "description": "statusStudent",
        "peekOfCode": "def getStudentStatus(note: int) -> str:\n    validations: Dict[bool, str] = {\n        note > 6: \"Aprovado\",\n        note >= 4 and note <= 6: \"Verificação Suplementar\",\n        note < 4: \"Reprovado\"\n    }\n    return validations[True]\ndef average(note1: float, note2: float) -> float:\n    return (note1 + note2) / 2\nfirstAverage: float = average(5, 5)",
        "detail": "statusStudent",
        "documentation": {
            "value": "\n```python\nfrom statusStudent import getStudentStatus\n```\n\n```python\n\n\n```\n\n```python\ndef getStudentStatus(note: int) -> str:\n    validations: Dict[bool, str] = {\n        note > 6: \"Aprovado\",\n        note >= 4 and note <= 6: \"Verificação Suplementar\",\n        note < 4: \"Reprovado\"\n    }\n    return validations[True]\ndef average(note1: float, note2: float) -> float:\n    return (note1 + note2) / 2\nfirstAverage: float = average(5, 5)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "statusStudent",
        "description": "statusStudent",
        "peekOfCode": "def average(note1: float, note2: float) -> float:\n    return (note1 + note2) / 2\nfirstAverage: float = average(5, 5)\nprint(getStudentStatus(firstAverage))\nsecondAverage: float = average(8, 6)\nprint(getStudentStatus(secondAverage))\nthirdAverage: float = average(4, 3)\nprint(getStudentStatus(thirdAverage))",
        "detail": "statusStudent",
        "documentation": {
            "value": "\n```python\nfrom statusStudent import average\n```\n\n```python\n\n\n```\n\n```python\ndef average(note1: float, note2: float) -> float:\n    return (note1 + note2) / 2\nfirstAverage: float = average(5, 5)\nprint(getStudentStatus(firstAverage))\nsecondAverage: float = average(8, 6)\nprint(getStudentStatus(secondAverage))\nthirdAverage: float = average(4, 3)\nprint(getStudentStatus(thirdAverage))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tryParseInt",
        "kind": 2,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "def tryParseInt(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        os._exit(0)\ndef getUserValue(message):\n    value = input(message)\n    value = tryParseInt(value)\n    return value",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import tryParseInt\n```\n\n```python\n\n\n```\n\n```python\ndef tryParseInt(value):\n    try:\n        return int(value)\n    except Exception:\n        print(\"You must be input a integer value.\")\n        os._exit(0)\ndef getUserValue(message):\n    value = input(message)\n    value = tryParseInt(value)\n    return value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getUserValue",
        "kind": 2,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "def getUserValue(message):\n    value = input(message)\n    value = tryParseInt(value)\n    return value\ndef isAbleToVote(age):\n    outputs = {\n        age >= 18: \"You are able to vote\",\n        age < 18: \"You are not able to bote\"\n    }\n    return outputs[True]",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import getUserValue\n```\n\n```python\n\n\n```\n\n```python\ndef getUserValue(message):\n    value = input(message)\n    value = tryParseInt(value)\n    return value\ndef isAbleToVote(age):\n    outputs = {\n        age >= 18: \"You are able to vote\",\n        age < 18: \"You are not able to bote\"\n    }\n    return outputs[True]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isAbleToVote",
        "kind": 2,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "def isAbleToVote(age):\n    outputs = {\n        age >= 18: \"You are able to vote\",\n        age < 18: \"You are not able to bote\"\n    }\n    return outputs[True]\ncurrentYear = datetime.now().year\npersonYear = getUserValue(\"Write your year of birth: \")\nage = currentYear - personYear\nmessage = isAbleToVote(age)",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import isAbleToVote\n```\n\n```python\n\n\n```\n\n```python\ndef isAbleToVote(age):\n    outputs = {\n        age >= 18: \"You are able to vote\",\n        age < 18: \"You are not able to bote\"\n    }\n    return outputs[True]\ncurrentYear = datetime.now().year\npersonYear = getUserValue(\"Write your year of birth: \")\nage = currentYear - personYear\nmessage = isAbleToVote(age)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "currentYear",
        "kind": 5,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "currentYear = datetime.now().year\npersonYear = getUserValue(\"Write your year of birth: \")\nage = currentYear - personYear\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import currentYear\n```\n\n```python\n\n\n```\n\n```python\ncurrentYear = datetime.now().year\npersonYear = getUserValue(\"Write your year of birth: \")\nage = currentYear - personYear\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "personYear",
        "kind": 5,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "personYear = getUserValue(\"Write your year of birth: \")\nage = currentYear - personYear\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import personYear\n```\n\n```python\n\n\n```\n\n```python\npersonYear = getUserValue(\"Write your year of birth: \")\nage = currentYear - personYear\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "age = currentYear - personYear\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import age\n```\n\n```python\n\n\n```\n\n```python\nage = currentYear - personYear\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "task4-exercise1",
        "description": "task4-exercise1",
        "peekOfCode": "message = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")",
        "detail": "task4-exercise1",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise1 import message\n```\n\n```python\n\n\n```\n\n```python\nmessage = isAbleToVote(age)\nprint(f\"You're {age} years old, and {message}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validateDate",
        "kind": 2,
        "importPath": "task4-exercise2-using-datetime",
        "description": "task4-exercise2-using-datetime",
        "peekOfCode": "def validateDate(day, month, year):\n    try:\n        return datetime(int(year), int(month), int(day))\n    except ValueError:\n        print(\"Invalid date\")\n        os._exit(0)\ninputDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = inputDate.split('/')\nvalidDate = validateDate(day, month, year).date().__format__(\"%d/%m/%y\")\nprint(f\"The date {validDate} is valid\")",
        "detail": "task4-exercise2-using-datetime",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2-using-datetime import validateDate\n```\n\n```python\n\n\n```\n\n```python\ndef validateDate(day, month, year):\n    try:\n        return datetime(int(year), int(month), int(day))\n    except ValueError:\n        print(\"Invalid date\")\n        os._exit(0)\ninputDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = inputDate.split('/')\nvalidDate = validateDate(day, month, year).date().__format__(\"%d/%m/%y\")\nprint(f\"The date {validDate} is valid\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "inputDate",
        "kind": 5,
        "importPath": "task4-exercise2-using-datetime",
        "description": "task4-exercise2-using-datetime",
        "peekOfCode": "inputDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = inputDate.split('/')\nvalidDate = validateDate(day, month, year).date().__format__(\"%d/%m/%y\")\nprint(f\"The date {validDate} is valid\")",
        "detail": "task4-exercise2-using-datetime",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2-using-datetime import inputDate\n```\n\n```python\n\n\n```\n\n```python\ninputDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = inputDate.split('/')\nvalidDate = validateDate(day, month, year).date().__format__(\"%d/%m/%y\")\nprint(f\"The date {validDate} is valid\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validDate",
        "kind": 5,
        "importPath": "task4-exercise2-using-datetime",
        "description": "task4-exercise2-using-datetime",
        "peekOfCode": "validDate = validateDate(day, month, year).date().__format__(\"%d/%m/%y\")\nprint(f\"The date {validDate} is valid\")",
        "detail": "task4-exercise2-using-datetime",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2-using-datetime import validDate\n```\n\n```python\n\n\n```\n\n```python\nvalidDate = validateDate(day, month, year).date().__format__(\"%d/%m/%y\")\nprint(f\"The date {validDate} is valid\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exitGame",
        "kind": 2,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "def exitGame(message):\n    print(message)\n    os._exit(0)\ndef validateMonth(month):\n    (month <= 0 or month > 12) and exitGame(\"Invalid Month\")\ndef validateDay(day, month, year):\n    daysInMonth = [0, 31, getFebruaryDaysInYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    (day <= 0 or day > daysInMonth[month]) and exitGame(\"Invalid Day\")\ndef validateYear(year):\n    currentYear = datetime.now().year",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import exitGame\n```\n\n```python\n\n\n```\n\n```python\ndef exitGame(message):\n    print(message)\n    os._exit(0)\ndef validateMonth(month):\n    (month <= 0 or month > 12) and exitGame(\"Invalid Month\")\ndef validateDay(day, month, year):\n    daysInMonth = [0, 31, getFebruaryDaysInYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    (day <= 0 or day > daysInMonth[month]) and exitGame(\"Invalid Day\")\ndef validateYear(year):\n    currentYear = datetime.now().year\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validateMonth",
        "kind": 2,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "def validateMonth(month):\n    (month <= 0 or month > 12) and exitGame(\"Invalid Month\")\ndef validateDay(day, month, year):\n    daysInMonth = [0, 31, getFebruaryDaysInYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    (day <= 0 or day > daysInMonth[month]) and exitGame(\"Invalid Day\")\ndef validateYear(year):\n    currentYear = datetime.now().year\n    (year == 0 or year < currentYear)\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import validateMonth\n```\n\n```python\n\n\n```\n\n```python\ndef validateMonth(month):\n    (month <= 0 or month > 12) and exitGame(\"Invalid Month\")\ndef validateDay(day, month, year):\n    daysInMonth = [0, 31, getFebruaryDaysInYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    (day <= 0 or day > daysInMonth[month]) and exitGame(\"Invalid Day\")\ndef validateYear(year):\n    currentYear = datetime.now().year\n    (year == 0 or year < currentYear)\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validateDay",
        "kind": 2,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "def validateDay(day, month, year):\n    daysInMonth = [0, 31, getFebruaryDaysInYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    (day <= 0 or day > daysInMonth[month]) and exitGame(\"Invalid Day\")\ndef validateYear(year):\n    currentYear = datetime.now().year\n    (year == 0 or year < currentYear)\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n    result = divisibleBy(4) and not(divisibleBy(100)) and divisibleBy(400)\n    return result",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import validateDay\n```\n\n```python\n\n\n```\n\n```python\ndef validateDay(day, month, year):\n    daysInMonth = [0, 31, getFebruaryDaysInYear(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    (day <= 0 or day > daysInMonth[month]) and exitGame(\"Invalid Day\")\ndef validateYear(year):\n    currentYear = datetime.now().year\n    (year == 0 or year < currentYear)\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n    result = divisibleBy(4) and not(divisibleBy(100)) and divisibleBy(400)\n    return result\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validateYear",
        "kind": 2,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "def validateYear(year):\n    currentYear = datetime.now().year\n    (year == 0 or year < currentYear)\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n    result = divisibleBy(4) and not(divisibleBy(100)) and divisibleBy(400)\n    return result\ndef getFebruaryDaysInYear(year):\n    days = [28, 29]\n    return days[isLeapYear(year)]",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import validateYear\n```\n\n```python\n\n\n```\n\n```python\ndef validateYear(year):\n    currentYear = datetime.now().year\n    (year == 0 or year < currentYear)\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n    result = divisibleBy(4) and not(divisibleBy(100)) and divisibleBy(400)\n    return result\ndef getFebruaryDaysInYear(year):\n    days = [28, 29]\n    return days[isLeapYear(year)]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isLeapYear",
        "kind": 2,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "def isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n    result = divisibleBy(4) and not(divisibleBy(100)) and divisibleBy(400)\n    return result\ndef getFebruaryDaysInYear(year):\n    days = [28, 29]\n    return days[isLeapYear(year)]\nfullDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = map(int, fullDate.split('/'))\nvalidateMonth(month)",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import isLeapYear\n```\n\n```python\n\n\n```\n\n```python\ndef isLeapYear(year):\n    def divisibleBy(number): return year % number == 0\n    result = divisibleBy(4) and not(divisibleBy(100)) and divisibleBy(400)\n    return result\ndef getFebruaryDaysInYear(year):\n    days = [28, 29]\n    return days[isLeapYear(year)]\nfullDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = map(int, fullDate.split('/'))\nvalidateMonth(month)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getFebruaryDaysInYear",
        "kind": 2,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "def getFebruaryDaysInYear(year):\n    days = [28, 29]\n    return days[isLeapYear(year)]\nfullDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = map(int, fullDate.split('/'))\nvalidateMonth(month)\nvalidateDay(day, month, year)\nvalidateYear(year)\nprint(\"Your date is valid.\")",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import getFebruaryDaysInYear\n```\n\n```python\n\n\n```\n\n```python\ndef getFebruaryDaysInYear(year):\n    days = [28, 29]\n    return days[isLeapYear(year)]\nfullDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = map(int, fullDate.split('/'))\nvalidateMonth(month)\nvalidateDay(day, month, year)\nvalidateYear(year)\nprint(\"Your date is valid.\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fullDate",
        "kind": 5,
        "importPath": "task4-exercise2",
        "description": "task4-exercise2",
        "peekOfCode": "fullDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = map(int, fullDate.split('/'))\nvalidateMonth(month)\nvalidateDay(day, month, year)\nvalidateYear(year)\nprint(\"Your date is valid.\")",
        "detail": "task4-exercise2",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise2 import fullDate\n```\n\n```python\n\n\n```\n\n```python\nfullDate = input(\"Enter the date in format 'dd/mm/yy' : \")\nday, month, year = map(int, fullDate.split('/'))\nvalidateMonth(month)\nvalidateDay(day, month, year)\nvalidateYear(year)\nprint(\"Your date is valid.\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "totalPerson",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "totalPerson = 5\nbeer = (75 * 2.20)\nspaghetti = (2 * 8.73)\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import totalPerson\n```\n\n```python\n\n\n```\n\n```python\ntotalPerson = 5\nbeer = (75 * 2.20)\nspaghetti = (2 * 8.73)\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "beer",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "beer = (75 * 2.20)\nspaghetti = (2 * 8.73)\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import beer\n```\n\n```python\n\n\n```\n\n```python\nbeer = (75 * 2.20)\nspaghetti = (2 * 8.73)\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spaghetti",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "spaghetti = (2 * 8.73)\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import spaghetti\n```\n\n```python\n\n\n```\n\n```python\nspaghetti = (2 * 8.73)\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tomatoSauce",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "tomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import tomatoSauce\n```\n\n```python\n\n\n```\n\n```python\ntomatoSauce = 3.45\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "onion",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "onion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import onion\n```\n\n```python\n\n\n```\n\n```python\nonion = (5.40 * 420 / 1000)\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "garlic",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "garlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import garlic\n```\n\n```python\n\n\n```\n\n```python\ngarlic = (30 * 250 / 1000)\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "frenchBread",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "frenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import frenchBread\n```\n\n```python\n\n\n```\n\n```python\nfrenchBread = (25 * 450 / 1000)\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "totalPrice",
        "kind": 5,
        "importPath": "task4-exercise3",
        "description": "task4-exercise3",
        "peekOfCode": "totalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")",
        "detail": "task4-exercise3",
        "documentation": {
            "value": "\n```python\nfrom task4-exercise3 import totalPrice\n```\n\n```python\n\n\n```\n\n```python\ntotalPrice = (\n    beer + spaghetti +\n    tomatoSauce + onion +\n    garlic + frenchBread) / totalPerson\nprint(f\"The price for each people is {totalPrice:.2f}\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Utils",
        "kind": 6,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "class Utils:\n    @staticmethod\n    def showMessage(message):\n        for index in range(8):\n            dots = [\n                f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n                f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            ]\n            print(f\"{dots[index]}\", end=\"\\r\")\n            sleep(0.2)",
        "detail": "utils",
        "documentation": {
            "value": "\n```python\nfrom utils import Utils\n```\n\n```python\n\n\n```\n\n```python\nclass Utils:\n    @staticmethod\n    def showMessage(message):\n        for index in range(8):\n            dots = [\n                f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n                f'{message}   ', f'{message}.', f'{message}..', f'{message}...',\n            ]\n            print(f\"{dots[index]}\", end=\"\\r\")\n            sleep(0.2)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Votes",
        "kind": 6,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "class Votes(Enum):\n    FirstCandidate = 1\n    SecondCandidate = 2\n    ThirdCandidate = 3\n    FourthCandidate = 4\n    Null = 5\n    Blank = 6\ndef showInvalidMessage() -> None:\n    print(\"Invalid Option, Choose between 1 and 6\")\ndef validateUserInput() -> int:",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import Votes\n```\n\n```python\n\n\n```\n\n```python\nclass Votes(Enum):\n    FirstCandidate = 1\n    SecondCandidate = 2\n    ThirdCandidate = 3\n    FourthCandidate = 4\n    Null = 5\n    Blank = 6\ndef showInvalidMessage() -> None:\n    print(\"Invalid Option, Choose between 1 and 6\")\ndef validateUserInput() -> int:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "showInvalidMessage",
        "kind": 2,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "def showInvalidMessage() -> None:\n    print(\"Invalid Option, Choose between 1 and 6\")\ndef validateUserInput() -> int:\n    optionVote = Utils.inputToInt(\"Vote:\")\n    if optionVote >= 1 and optionVote <= 6:\n        return optionVote\n    else:\n        showInvalidMessage()\n        return validateUserInput()\ntotalVotes = {",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import showInvalidMessage\n```\n\n```python\n\n\n```\n\n```python\ndef showInvalidMessage() -> None:\n    print(\"Invalid Option, Choose between 1 and 6\")\ndef validateUserInput() -> int:\n    optionVote = Utils.inputToInt(\"Vote:\")\n    if optionVote >= 1 and optionVote <= 6:\n        return optionVote\n    else:\n        showInvalidMessage()\n        return validateUserInput()\ntotalVotes = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "validateUserInput",
        "kind": 2,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "def validateUserInput() -> int:\n    optionVote = Utils.inputToInt(\"Vote:\")\n    if optionVote >= 1 and optionVote <= 6:\n        return optionVote\n    else:\n        showInvalidMessage()\n        return validateUserInput()\ntotalVotes = {\n    Votes.FirstCandidate: 0,\n    Votes.SecondCandidate: 0,",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import validateUserInput\n```\n\n```python\n\n\n```\n\n```python\ndef validateUserInput() -> int:\n    optionVote = Utils.inputToInt(\"Vote:\")\n    if optionVote >= 1 and optionVote <= 6:\n        return optionVote\n    else:\n        showInvalidMessage()\n        return validateUserInput()\ntotalVotes = {\n    Votes.FirstCandidate: 0,\n    Votes.SecondCandidate: 0,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "totalVotes",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "totalVotes = {\n    Votes.FirstCandidate: 0,\n    Votes.SecondCandidate: 0,\n    Votes.ThirdCandidate: 0,\n    Votes.FourthCandidate: 0,\n    Votes.Null: 0,\n    Votes.Blank: 0\n}\nUtils.showMessage(\"Starting\")\nprint(\"\"\"",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import totalVotes\n```\n\n```python\n\n\n```\n\n```python\ntotalVotes = {\n    Votes.FirstCandidate: 0,\n    Votes.SecondCandidate: 0,\n    Votes.ThirdCandidate: 0,\n    Votes.FourthCandidate: 0,\n    Votes.Null: 0,\n    Votes.Blank: 0\n}\nUtils.showMessage(\"Starting\")\nprint(\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "[1]",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "[1] = Vote for First Candidate            \n[2] = Vote for Second Candidate            \n[3] = Vote for Third Candidate            \n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import [1]\n```\n\n```python\n\n\n```\n\n```python\n[1] = Vote for First Candidate            \n[2] = Vote for Second Candidate            \n[3] = Vote for Third Candidate            \n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "[2]",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "[2] = Vote for Second Candidate            \n[3] = Vote for Third Candidate            \n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import [2]\n```\n\n```python\n\n\n```\n\n```python\n[2] = Vote for Second Candidate            \n[3] = Vote for Third Candidate            \n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "[3]",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "[3] = Vote for Third Candidate            \n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import [3]\n```\n\n```python\n\n\n```\n\n```python\n[3] = Vote for Third Candidate            \n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "[4]",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\nsystem('cls||clear')",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import [4]\n```\n\n```python\n\n\n```\n\n```python\n[4] = Vote for Fourth Candidate            \n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\nsystem('cls||clear')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "[5]",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\nsystem('cls||clear')\nprint(\"The Final Result is :\")",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import [5]\n```\n\n```python\n\n\n```\n\n```python\n[5] = Vote Null\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\nsystem('cls||clear')\nprint(\"The Final Result is :\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "[6]",
        "kind": 5,
        "importPath": "votes",
        "description": "votes",
        "peekOfCode": "[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\nsystem('cls||clear')\nprint(\"The Final Result is :\")\nfor vote, quantity in totalVotes.items():",
        "detail": "votes",
        "documentation": {
            "value": "\n```python\nfrom votes import [6]\n```\n\n```python\n\n\n```\n\n```python\n[6] = Vote Blank\n\"\"\")\nvotesToRegister: int = Utils.inputToInt(\"How many votes do you want to register?\")\nfor usuario in range(votesToRegister):\n    userVote: int = validateUserInput()\n    candidateOption = Votes(userVote)\n    totalVotes[candidateOption] = totalVotes[candidateOption] + 1\nsystem('cls||clear')\nprint(\"The Final Result is :\")\nfor vote, quantity in totalVotes.items():\n```\n",
            "supportThemeIcons": false
        }
    }
]